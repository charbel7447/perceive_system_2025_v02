<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Balance Sheet</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Tailwind CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        thead th { position: sticky; top: 0; background: #f9fafb; z-index: 10; }
        .table-container { max-height: 500px; overflow-y: auto; }
        mark { background: #fde68a; padding: 0 .1rem; border-radius: .125rem; }
        /* Optional subtle shadow for the pane */
        .pane-shadow { box-shadow: -12px 0 24px -18px rgba(0,0,0,.25); }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">

<div class="min-h-screen bg-gray-100 py-8">
    <!-- Filters -->
    <div class="max-w-7xl mx-auto bg-white shadow rounded-2xl p-6 border border-gray-200 mb-6">
        <form method="GET" action="{{ route('balance.sheet') }}" class="flex flex-wrap items-end gap-4">
            <div class="flex-1">
                <h2 class="text-3xl font-bold text-gray-800">📊 Balance Sheet</h2>
                <p class="text-gray-500 text-sm">Filter and explore accounts reports.</p>
            </div>

            <!-- Date Filters -->
            <div>
                <label class="block text-sm text-gray-600 mb-1">From</label>
                <input type="date" name="from" value="{{ request('from') }}"
                       class="border rounded-lg px-3 py-2 w-40 focus:ring focus:ring-blue-300 bg-gray-50"/>
            </div>
            <div>
                <label class="block text-sm text-gray-600 mb-1">To</label>
                <input type="date" name="to" value="{{ request('to') }}"
                       class="border rounded-lg px-3 py-2 w-40 focus:ring focus:ring-blue-300 bg-gray-50"/>
            </div>

            <!-- Search (live) -->
            <div>
                <label class="block text-sm text-gray-600 mb-1">Search</label>
                <input id="liveSearch" type="text" name="search" placeholder="🔍 Account code, name"
                       value="{{ request('search') }}"
                       class="border rounded-lg px-4 py-2 w-64 focus:ring focus:ring-blue-300 bg-gray-50"/>
            </div>

            <!-- Buttons -->
            <div class="flex gap-2">
                <button type="submit"
                        class="bg-blue-600 text-white px-5 py-2 rounded-xl shadow hover:bg-blue-700 transition">
                    Apply
                </button>
                <a href="{{ route('balance.sheet') }}"
                   class="bg-gray-200 text-gray-800 px-5 py-2 rounded-xl shadow hover:bg-gray-300 transition">
                    Reset
                </a>
                <button type="submit" name="export" value="1"
                        class="bg-green-600 text-white px-5 py-2 rounded-xl shadow hover:bg-green-700 transition">
                    Export
                </button>
            </div>
        </form>
        <p class="text-xs text-gray-500 mt-2">
            Tip: Live search sorts by <b>exact</b> &rarr; <b>code starts with</b> &rarr; <b>name starts with</b> &rarr; <b>contains</b>.
        </p>
    </div>

    <!-- Split container -->
    <div id="splitRoot" class="max-w-7xl mx-auto flex gap-4">
        <!-- LEFT: main content -->
        <div id="leftCol" class="w-full transition-all duration-300">
            <!-- Classes & Accounts -->
            <div class="space-y-8">
                @php 
                    $grandDebit = 0; 
                    $grandCredit = 0; 
                    $grandBalance = 0;
                    $showAll = !request('from') && !request('to') && !request('search');
                @endphp

                @foreach($classes as $class)
                    @php 
                        // Show all on first load; otherwise filter by date and search
                        $filteredAccounts = $class->accounts->filter(function($account) use ($showAll) {
                            if($showAll) return true;

                            $items = $account->journalItems;
                            if(request('from')) $items = $items->filter(fn($i) => $i->voucher && $i->voucher->date >= request('from'));
                            if(request('to'))   $items = $items->filter(fn($i) => $i->voucher && $i->voucher->date <= request('to'));

                            if(request('search')){
                                $s = strtolower(request('search'));
                                $codeMatch = str_starts_with(strtolower($account->code ?? ''), $s);
                                $nameMatch = str_contains(strtolower($account->name_en ?? ''), $s) || str_contains(strtolower($account->name_ar ?? ''), $s);
                                if(!$codeMatch && !$nameMatch) return false;
                            }

                            // When searching, show even if zero items (so you can find empty accounts)
                            return $items->count() > 0 || request('search');
                        });

                        if($filteredAccounts->isEmpty()) continue;

                        $subtotalDebit = 0; 
                        $subtotalCredit = 0; 
                        $subtotalBalance = 0;
                    @endphp

                    <div class="bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden class-block" data-class-code="{{ $class->code }}">
                        <!-- Class Header -->
                        <div class="bg-gradient-to-r from-indigo-100 via-blue-100 to-indigo-200 p-4 border-b border-gray-300">
                            <h3 class="text-lg font-semibold text-gray-800">
                                {{ $class->code }} — {{ $class->name_en }} / {{ $class->name_ar }}
                            </h3>
                        </div>

                        <!-- Table -->
                        <div class="overflow-x-auto table-container">
                            <table class="w-full border-collapse">
                                <thead class="bg-gray-50 sticky top-0 z-10 text-sm text-gray-600">
                                    <tr>
                                        <th class="p-3 text-left">Code</th>
                                        <th class="p-3 text-left">Account</th>
                                        <th class="p-3 text-right">Debit</th>
                                        <th class="p-3 text-right">Credit</th>
                                        <th class="p-3 text-right">Balance</th>
                                    </tr>
                                </thead>
                                <tbody class="text-gray-700 text-sm">
                                    @foreach($filteredAccounts as $idx => $account)
                                        @php
                                            $items = $account->journalItems;
                                            if(request('from')) $items = $items->filter(fn($i) => $i->voucher && $i->voucher->date >= request('from'));
                                            if(request('to'))   $items = $items->filter(fn($i) => $i->voucher && $i->voucher->date <= request('to'));

                                            $debit = (float)$items->sum('debit');
                                            $credit = (float)$items->sum('credit');
                                            $balance = $debit - $credit;

                                            $subtotalDebit += $debit;
                                            $subtotalCredit += $credit;
                                            $subtotalBalance += $balance;

                                            $grandDebit += $debit;
                                            $grandCredit += $credit;
                                            $grandBalance += $balance;
                                        @endphp

                                        <!-- Account Row -->
                                        <tr class="hover:bg-blue-50 cursor-pointer transition account-row"
                                            data-index="{{ $idx }}"
                                            data-id="{{ $account->id }}"
                                            data-code="{{ strtolower($account->code ?? '') }}"
                                            data-name="{{ strtolower(($account->name_en ?? '').' / '.($account->name_ar ?? '')) }}"
                                            data-debit="{{ $debit }}"
                                            data-credit="{{ $credit }}"
                                            data-balance="{{ $balance }}"
                                            onclick="document.getElementById('acc{{ $account->id }}').classList.toggle('hidden')">
                                            <td class="p-3 font-mono text-gray-600 code-cell" data-original="{{ $account->code }}">{{ $account->code }}</td>
                                            <td class="p-3 name-cell" data-original="{{ $account->name_en }} / {{ $account->name_ar }}">{{ $account->name_en }} / {{ $account->name_ar }}</td>
                                            <td class="p-3 text-right text-green-700 font-medium">{{ number_format($debit, 2) }}</td>
                                            <td class="p-3 text-right text-red-700 font-medium">{{ number_format($credit, 2) }}</td>
                                            <td class="p-3 text-right font-semibold {{ $balance >= 0 ? 'text-green-800' : 'text-red-800' }}">
                                                {{ number_format($balance, 2) }}
                                            </td>
                                        </tr>

                                        <!-- Journals Expandable -->
                                        <tr id="acc{{ $account->id }}" class="hidden bg-gray-50 transition detail-row" data-parent-id="{{ $account->id }}">
                                            <td colspan="5" class="p-3">
                                                <table class="w-full ml-4 border-l-4 border-blue-300 text-xs">
                                                    <thead>
                                                        <tr class="bg-gray-100 text-gray-600">
                                                            <th class="p-2">JV No.</th>
                                                            <th class="p-2">Date</th>
                                                            <th class="p-2">Description</th>
                                                            <th class="p-2 text-right">Debit</th>
                                                            <th class="p-2 text-right">Credit</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach($items as $item)
                                                            <tr class="hover:bg-gray-100 cursor-pointer"
                                                                onclick="openJV('{{ url('/docs/journal_vouchers/'.$item->journal_voucher_id) }}')">
                                                                <td class="p-2">{{ $item->voucher->number ?? '' }}</td>
                                                                <td class="p-2">{{ $item->voucher->date ?? '' }}</td>
                                                                <td class="p-2">{{ $item->description }}</td>
                                                                <td class="p-2 text-right">{{ number_format($item->debit, 2) }}</td>
                                                                <td class="p-2 text-right">{{ number_format($item->credit, 2) }}</td>
                                                            </tr>
                                                        @endforeach
                                                    </tbody>
                                                </table>
                                            </td>
                                        </tr>
                                    @endforeach

                                    <!-- Class Subtotal -->
                                    <tr class="bg-blue-50 font-bold border-t border-blue-200 class-subtotal">
                                        <td colspan="2" class="p-3 text-right">Subtotal ({{ $class->name_en }} / {{ $class->name_ar }})</td>
                                        <td class="p-3 text-right text-green-700 subtotal-debit">{{ number_format($subtotalDebit, 2) }}</td>
                                        <td class="p-3 text-right text-red-700 subtotal-credit">{{ number_format($subtotalCredit, 2) }}</td>
                                        <td class="p-3 text-right text-blue-800 subtotal-balance">{{ number_format($subtotalBalance, 2) }}</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                @endforeach

                <!-- Grand Totals -->
                <div class="bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden" id="grandTotals">
                    <div class="bg-gradient-to-r from-green-100 to-green-200 p-4 border-b border-gray-300">
                        <h3 class="text-lg font-semibold text-gray-800">TOTAL BALANCE</h3>
                    </div>
                    <div class="overflow-x-auto">
                        <table class="w-full border-collapse">
                            <tbody>
                                <tr class="bg-green-50 font-bold">
                                    <td colspan="2" class="p-3 text-right">Grand Total</td>
                                    <td class="p-3 text-right text-green-700" id="grandDebit">{{ number_format($grandDebit, 2) }}</td>
                                    <td class="p-3 text-right text-red-700" id="grandCredit">{{ number_format($grandCredit, 2) }}</td>
                                    <td class="p-3 text-right text-blue-800" id="grandBalance">{{ number_format($grandBalance, 2) }}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div> <!-- /space-y-8 -->
        </div>

        <!-- RIGHT: voucher pane -->
        <aside id="rightPane" class="hidden md:block w-0 transition-all duration-300 pane-shadow bg-white border border-gray-200 rounded-2xl overflow-hidden">
            <div class="flex items-center justify-between px-4 py-2 border-b bg-gray-50">
                <div class="flex items-center gap-3">
                    <span class="text-sm font-semibold text-gray-700">Journal Voucher</span>
                    <a id="openNewTabLink" href="#" target="_blank" class="text-xs text-blue-600 hover:underline hidden md:inline">Open in new tab ↗</a>
                </div>
                <button onclick="closePane()" class="rounded-lg px-2 py-1 text-gray-600 hover:text-red-600 focus:outline-none" title="Close">✕</button>
            </div>

            <!-- Loading -->
            <div id="paneLoader" class="flex items-center justify-center py-8">
                <svg class="animate-spin h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
                </svg>
                <span class="ml-3 text-sm text-gray-500">Loading voucher…</span>
            </div>

            <!-- Iframe host -->
            <iframe id="jvFrame" src="about:blank" class="w-full border-0" style="height: calc(100vh - 12rem);" loading="lazy"></iframe>
        </aside>
    </div>
</div>

<script>
/** ---------- Helper formatting (existing) ---------- */
function fmt(n){ return (Math.round(n*100)/100).toFixed(2); }

function highlightText(text, query){
    if(!query) return text;
    try{
        const esc = query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        const re = new RegExp('('+esc+')','ig');
        return text.replace(re, '<mark>$1</mark>');
    }catch(e){
        return text;
    }
}

/** ---------- Live Search (unchanged) ---------- */
(function(){
    const input = document.getElementById('liveSearch');
    const classBlocks = Array.from(document.querySelectorAll('.class-block'));

    classBlocks.forEach(block=>{
        const rows = block.querySelectorAll('tr.account-row');
        rows.forEach((r, i)=> r.dataset.originalIndex = i.toString());
    });

    function scoreRow(row, q){
        if(!q) return {score:0, exact:false, match:false};
        const code = row.dataset.code || '';
        const name = row.dataset.name || '';
        const isExact = code === q || name === q;
        const codePrefix = code.startsWith(q);
        const namePrefix = name.startsWith(q);
        const contains = code.includes(q) || name.includes(q);
        let s = 0;
        if(isExact) s = 3;
        else if(codePrefix) s = 2.5;
        else if(namePrefix) s = 2;
        else if(contains) s = 1;
        return {score:s, exact:isExact, match:(s>0)};
    }

    function applySearch(){
        const q = (input.value || '').trim().toLowerCase();
        let grandDebit = 0, grandCredit = 0, grandBalance = 0;

        classBlocks.forEach(block=>{
            const tbody = block.querySelector('tbody');
            const accRows = Array.from(tbody.querySelectorAll('tr.account-row'));
            const detailRows = Array.from(tbody.querySelectorAll('tr.detail-row'));

            // Clear highlights
            accRows.forEach(row=>{
                const codeCell = row.querySelector('.code-cell');
                const nameCell = row.querySelector('.name-cell');
                if(codeCell?.dataset.original) codeCell.innerHTML = codeCell.dataset.original;
                if(nameCell?.dataset.original) nameCell.innerHTML = nameCell.dataset.original;
            });

            if(!q){
                accRows
                    .sort((a,b)=> (+a.dataset.originalIndex) - (+b.dataset.originalIndex))
                    .forEach(r=>{
                        r.classList.remove('hidden');
                        const d = tbody.querySelector(`tr.detail-row[data-parent-id="${r.dataset.id}"]`);
                        if(d) r.after(d);
                    });
            } else {
                const withScore = accRows.map(r=>{
                    const sc = scoreRow(r, q);
                    return {...sc, row:r};
                }).filter(x=>x.match);

                withScore.sort((a,b)=>{
                    if(b.score !== a.score) return b.score - a.score;
                    const ca = a.row.dataset.code || '';
                    const cb = b.row.dataset.code || '';
                    return ca.localeCompare(cb);
                });

                accRows.forEach(r=> r.classList.add('hidden'));
                detailRows.forEach(d=> d.classList.add('hidden'));

                withScore.forEach(({row})=>{
                    const detail = tbody.querySelector(`tr.detail-row[data-parent-id="${row.dataset.id}"]`);
                    tbody.appendChild(row);
                    if(detail) tbody.appendChild(detail);
                    row.classList.remove('hidden');

                    const codeCell = row.querySelector('.code-cell');
                    const nameCell = row.querySelector('.name-cell');
                    if(codeCell?.dataset.original) codeCell.innerHTML = highlightText(codeCell.dataset.original, input.value);
                    if(nameCell?.dataset.original) nameCell.innerHTML = highlightText(nameCell.dataset.original, input.value);
                });
            }

            // Recompute class subtotal from visible rows
            let cDebit = 0, cCredit = 0, cBalance = 0, visibleCount = 0;
            Array.from(tbody.querySelectorAll('tr.account-row')).forEach(r=>{
                if(r.classList.contains('hidden')) return;
                visibleCount++;
                cDebit   += parseFloat(r.dataset.debit   || '0');
                cCredit  += parseFloat(r.dataset.credit  || '0');
                cBalance += parseFloat(r.dataset.balance || '0');
            });

            const subRow = tbody.querySelector('tr.class-subtotal');
            if(subRow){
                subRow.querySelector('.subtotal-debit').textContent   = fmt(cDebit);
                subRow.querySelector('.subtotal-credit').textContent  = fmt(cCredit);
                subRow.querySelector('.subtotal-balance').textContent = fmt(cBalance);
            }

            if(q && visibleCount === 0){
                block.classList.add('hidden');
            } else {
                block.classList.remove('hidden');
                grandDebit  += cDebit;
                grandCredit += cCredit;
                grandBalance+= cBalance;
            }
        });

        if(!q){ return; }
        document.getElementById('grandDebit').textContent  = fmt(grandDebit);
        document.getElementById('grandCredit').textContent = fmt(grandCredit);
        document.getElementById('grandBalance').textContent= fmt(grandBalance);
    }

    input.addEventListener('input', applySearch);
    applySearch();
})();

/** ---------- Right pane controls ---------- */
const leftCol = document.getElementById('leftCol');
const rightPane = document.getElementById('rightPane');
const jvFrame = document.getElementById('jvFrame');
const loader = document.getElementById('paneLoader');
const openNewTabLink = document.getElementById('openNewTabLink');

function openJV(rawUrl){
    // If your JV route can render a compact version, add ?embed=1 (safe to append)
    const url = rawUrl + (rawUrl.includes('?') ? '&' : '?') + 'embed=1';

    // Show pane (desktop: 1/3 width; mobile: full overlay)
    leftCol.classList.remove('w-full');
    leftCol.classList.add('md:w-2/3');
    rightPane.classList.remove('hidden');
    rightPane.classList.add('md:w-1/3');

    // Set links, loader, and iframe
    openNewTabLink.href = rawUrl;
    openNewTabLink.classList.remove('hidden');
    loader.classList.remove('hidden');
    jvFrame.classList.add('opacity-0');
    jvFrame.src = url;
}

function closePane(){
    // Reset sizes
    leftCol.classList.remove('md:w-2/3');
    leftCol.classList.add('w-full');
    rightPane.classList.add('hidden');
    rightPane.classList.remove('md:w-1/3');

    // Reset iframe to free memory
    jvFrame.src = 'about:blank';
    loader.classList.add('hidden');
    openNewTabLink.classList.add('hidden');
}

// Hide loader when frame is ready
jvFrame.addEventListener('load', () => {
    loader.classList.add('hidden');
    jvFrame.classList.remove('opacity-0');
});

// Close on ESC
document.addEventListener('keydown', (e)=>{
    if(e.key === 'Escape') closePane();
});
</script>

</body>
</html>
